To design a myNotes logging application with an API to fetch details based on a note ID, you can follow the steps below:

1. Set up a new Node.js project and initialize it with a `package.json` file.
2. Install the required dependencies, including Express, by running the following command in your project directory:
   ```
   npm install express
   ```
3. Create an `app.js` file and require the necessary modules:
   ```javascript
   const express = require('express');
   const app = express();
   ```
4. Define a sample data structure to store the notes. For simplicity, we can use an array of objects:
   ```javascript
   const notes = [
     { id: 1, title: 'Note 1', content: 'This is the content of Note 1' },
     { id: 2, title: 'Note 2', content: 'This is the content of Note 2' },
     // Add more sample notes as needed
   ];
   ```
5. Define a route to fetch the details of a note based on the note ID provided in the URL:
   ```javascript
   app.get('/notes/:noteId', (req, res) => {
     const noteId = parseInt(req.params.noteId);

     // Find the note with the provided ID
     const note = notes.find((note) => note.id === noteId);

     // If the note is found, send the details as a response
     if (note) {
       res.json(note);
     } else {
       // If the note is not found, send an error message
       res.status(404).json({ error: 'Note not found' });
     }
   });
   ```
   In this example, the note ID is extracted from the URL using `req.params.noteId`. The `notes` array is then searched to find the note with the matching ID. If the note is found, its details are sent as a JSON response. If the note is not found, a JSON response with an error message and a status code of 404 is sent.
6. Start the server and listen on a specific port:
   ```javascript
   const port = 3000;
   app.listen(port, () => {
     console.log(`Server is running on port ${port}`);
   });
   ```
7. Run the application using Node.js by executing the command:
   ```
   node app.js
   ```
   You should see the server running on the specified port.
8. Test the API by making a GET request to the specified URL with a note ID, for example:
   ```
   http://localhost:3000/notes/7555
   ```
   Replace `7555` with the desired note ID. If a note with that ID exists in the `notes` array, you should receive a JSON response with the corresponding note's details. If the note is not found, you will receive a JSON response with an error message and a status code of 404.

Remember to adjust the implementation as per your requirements and replace the sample data structure with your own data source or database.